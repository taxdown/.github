name: Handle python service build and deploy on monorepo CI with multiple deployments support

on:
  workflow_call:
    inputs:
      service:
        description: 'Service of the monorepo'
        required: true
        type: string
      main-branch:
        description: 'Main branch of the monorepo'
        required: false
        type: string
        default: main
      node-version:
        description: 'Node version for compiling'
        required: true
        type: string
      github-app-id:
        description: 'Github app id'
        type: string
        required: true
      deployments:
        description: |
          JSON array of deployment configurations. Each deployment must have:
          - "name": deployment identifier
          - "aws-region": AWS region for this deployment
          - "env" (optional): additional environment variables
          STAGE is always inferred from branch/tag and should NOT be passed in env.
          Examples:
          - By country: '[{"name": "spain", "aws-region": "eu-west-1", "env": {"COUNTRY": "ES"}}, {"name": "mexico", "aws-region": "us-east-1", "env": {"COUNTRY": "MX"}}]'
          - Single region: '[{"name": "default", "aws-region": "us-east-1"}]'
        required: true
        type: string
    secrets:
      AWS_DEPLOYMENT_ROLE:
        required: true
      NPM_TOKEN:
        required: true
      GITHUB_APP_PRIVATE_KEY:
        required: true

jobs:
  prepare:
    name: Prepare deployment matrix based on branch, tags, and inputs
    runs-on: ubuntu-latest
    outputs:
      deployments: ${{ steps.set-deployments.outputs.deployments }}
      should_release: ${{ steps.set-deployments.outputs.should_release }}
      stages: ${{ steps.set-deployments.outputs.stages }}
    steps:
      - id: set-deployments
        run: |
          # Determine STAGE based on branch/tag (always inferred, never passed)
          if [[ "$GITHUB_REF" == refs/heads/${{inputs.main-branch}} ]] ; then
            STAGES='["dev", "staging"]'
            SHOULD_RELEASE="true"
            echo "ðŸ“‹ Main branch: stages dev and staging"
          elif [[ "$GITHUB_REF" == refs/tags/${{inputs.service}}-v* ]] ; then
            STAGES='["prod"]'
            SHOULD_RELEASE="true"
            echo "ðŸ“‹ Production tag: stage prod"
          elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            STAGES='["dev"]'
            SHOULD_RELEASE="true"
            echo "ðŸ“‹ Manual dispatch: stage dev"
          else
            STAGES='["staging"]'
            SHOULD_RELEASE="false"
            echo "ðŸ“‹ Feature branch: stage staging (tests only)"
          fi
          
          echo "stages=$STAGES" >> $GITHUB_OUTPUT
          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          
          # Deployments are required
          DEPLOYMENTS='${{ inputs.deployments }}'
          echo "deployments=$DEPLOYMENTS" >> $GITHUB_OUTPUT
          echo "ðŸ“‹ Using deployments configuration: $DEPLOYMENTS"

  build-and-test:
    name: Build & Test ðŸ”¨
    needs: prepare
    runs-on: ubuntu-latest
    environment:
      name: ${{ matrix.stage }}
    env:
      SERVICE_PATH: ${{ inputs.service }}
      NODE_OPTIONS: --max_old_space_size=7168
      STAGE: ${{ matrix.stage }}
    strategy:
      fail-fast: false
      matrix:
        stage: ${{ fromJson(needs.prepare.outputs.stages) }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup GitHub authentication
        id: github-auth
        uses: taxdown/.github/.github/actions/setup-github-auth@main
        with:
          github-app-id: ${{ inputs.github-app-id }}
          github-app-private-key: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Node & NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: https://registry.npmjs.org
          scope: '@taxdown'
          cache: 'npm'
          cache-dependency-path: |
            ${{ env.SERVICE_PATH }}/package-lock.json
            ${{ env.SERVICE_PATH }}/infrastructure/package-lock.json

      - name: Set up QEMU (for ARM emulation)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install service dependencies
        run: |
          cd "$SERVICE_PATH"
          npm ci
        env:
          GIT_TOKEN: ${{ steps.github-auth.outputs.token }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Run linting
        run: |
          cd "$SERVICE_PATH"
          npm run lint
        env:
          GIT_TOKEN: ${{ steps.github-auth.outputs.token }}

      - name: Run tests
        run: |
          cd "$SERVICE_PATH"
          npm run test
        env:
          GIT_TOKEN: ${{ steps.github-auth.outputs.token }}


  deploy:
    name: Deploy ðŸš€ (${{ matrix.deployment.name }} - ${{ matrix.stage }})
    needs: 
      - prepare
      - build-and-test
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.should_release == 'true' }}
    environment:
      name: ${{ matrix.stage }}-${{ matrix.deployment.name }}
    env:
      SERVICE_PATH: ${{ inputs.service }}
      NODE_OPTIONS: --max_old_space_size=7168
      STAGE: ${{ matrix.stage }}
    strategy:
      fail-fast: false
      matrix:
        stage: ${{ fromJson(needs.prepare.outputs.stages) }}
        deployment: ${{ fromJson(needs.prepare.outputs.deployments) }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE }}
          aws-region: ${{ matrix.deployment.aws-region }}

      - name: Setup GitHub authentication
        id: github-auth
        uses: taxdown/.github/.github/actions/setup-github-auth@main
        with:
          github-app-id: ${{ inputs.github-app-id }}
          github-app-private-key: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Node & NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: https://registry.npmjs.org
          scope: '@taxdown'
          cache: 'npm'
          cache-dependency-path: |
            ${{ env.SERVICE_PATH }}/package-lock.json
            ${{ env.SERVICE_PATH }}/infrastructure/package-lock.json

      - name: Set up QEMU (for ARM emulation)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install service dependencies
        run: |
          cd "$SERVICE_PATH"
          npm ci
        env:
          GIT_TOKEN: ${{ steps.github-auth.outputs.token }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set deployment environment variables
        if: ${{ matrix.deployment.env != null }}
        run: |
          echo "ðŸ”§ Setting additional environment variables for: ${{ matrix.deployment.name }}"
          echo '${{ toJson(matrix.deployment.env) }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
          echo "ðŸ“‹ Environment variables set:"
          echo "  - STAGE=${{ matrix.stage }} (inferred from branch/tag)"
          echo '${{ toJson(matrix.deployment.env) }}' | jq -r 'to_entries[] | "  - \(.key)=\(.value)"'

      - name: Deploy ${{ matrix.deployment.name }} to ${{ matrix.stage }}
        run: |
          cd "$SERVICE_PATH"
          echo "ðŸš€ Deploying ${{ matrix.deployment.name }} to stage: ${{ matrix.stage }}"
          npm run deploy
        env:
          GIT_TOKEN: ${{ steps.github-auth.outputs.token }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}