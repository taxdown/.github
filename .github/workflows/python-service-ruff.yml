name: Handle python service build and deploy on monorepo CI from shared workflow

on:
  workflow_call:
    inputs:
      aws-region:
        description: 'AWS region for building and deploy'
        required: true
        type: string
      service:
        description: 'Service of the monorepo'
        required: true
        type: string
      python-version:
        description: 'Python version to run'
        required: true
        type: string
      main-branch:
        description: 'Main branch of the monorepo'
        required: false
        type: string
        default: master
    secrets:
      AWS_DEPLOYMENT_ROLE:
        required: true
      NPM_TOKEN:
        required: true
      GIT_SSH_KEY:
        required: false

jobs:
  prepare:
    name: Prepare the building matrix based on branch and tags
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-environments.outputs.matrix }}
      should_release: ${{ steps.set-environments.outputs.should_release }}
    steps:
      - id: set-environments
        env:
          MAIN_BRANCH: ${{ inputs.main-branch }}
          SERVICE_NAME: ${{ inputs.service }}
        run: |
          if [[ "$GITHUB_REF" == "refs/heads/$MAIN_BRANCH" ]] ; then
              echo "matrix=[\"dev\",\"staging\"]" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == "refs/tags/$SERVICE_NAME-v"* ]] ; then
              echo "matrix=[\"prod\"]" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
          else
              echo "matrix=[\"staging\"]" >> $GITHUB_OUTPUT
              echo "should_release=false" >> $GITHUB_OUTPUT
          fi
  build:
    name: Build python service and run tests ðŸ”¨
    needs: prepare
    runs-on: ubuntu-latest
    environment:
      name: ${{ matrix.current-environment }}
    env:
      NODE_OPTIONS: --max_old_space_size=7168
      STAGE: ${{ matrix.current-environment }}
      SERVICE_NAME: ${{ inputs.service }}
    strategy:
      fail-fast: false
      matrix:
        current-environment: ${{fromJson(needs.prepare.outputs.matrix)}}
    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOYMENT_ROLE }}
          aws-region: ${{ inputs.aws-region }}

      - name: Set NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: https://registry.npmjs.org
          scope: '@taxdown'

      - name: Installing NPM dependencies
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{inputs.python-version}}

      - name: Cache Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ inputs.python-version }}-${{ env.POETRY_VERSION }}

      - name: Cache Packages
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}

      - name: Install and configure Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          poetry config installer.parallel true

      - name: Install SSH key
        if: ${{ secrets.GIT_SSH_KEY != '' }}
        env:
          SSH_KEY: ${{ secrets.GIT_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install python dependencies via poetry
        working-directory: ${{ env.SERVICE_NAME }}/src
        run: poetry install

      - name: Run python sanity checks for service
        working-directory: ${{ env.SERVICE_NAME }}/src
        run: poetry run ruff check --output-format=github .

      - name: Run additional python checks
        working-directory: ${{ env.SERVICE_NAME }}/src
        run: poetry run mypy --ignore-missing-imports --scripts-are-modules -m taxdown

      - name: Run tests
        working-directory: ${{ env.SERVICE_NAME }}/src
        run: poetry run python -m pytest

      - name: Run build application
        if: ${{ needs.prepare.outputs.should_release == 'true' }}
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm run build
        timeout-minutes: 300
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Deploy the server ðŸš€
        if: ${{ needs.prepare.outputs.should_release == 'true' }}
        working-directory: ${{ env.SERVICE_NAME }}
        run: npm run deploy